// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	context "context"
	databasemodel "loanManagement/database/model"

	mock "github.com/stretchr/testify/mock"

	model "loanManagement/repo/model"
)

// ScheduledRepayment is an autogenerated mock type for the ScheduledRepayment type
type ScheduledRepayment struct {
	mock.Mock
}

type ScheduledRepayment_Expecter struct {
	mock *mock.Mock
}

func (_m *ScheduledRepayment) EXPECT() *ScheduledRepayment_Expecter {
	return &ScheduledRepayment_Expecter{mock: &_m.Mock}
}

// BulkCreate provides a mock function with given fields: ctx, data
func (_m *ScheduledRepayment) BulkCreate(ctx context.Context, data model.BulkCreateScheduledRepaymentInput) error {
	ret := _m.Called(ctx, data)

	if len(ret) == 0 {
		panic("no return value specified for BulkCreate")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, model.BulkCreateScheduledRepaymentInput) error); ok {
		r0 = rf(ctx, data)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ScheduledRepayment_BulkCreate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BulkCreate'
type ScheduledRepayment_BulkCreate_Call struct {
	*mock.Call
}

// BulkCreate is a helper method to define mock.On call
//   - ctx context.Context
//   - data model.BulkCreateScheduledRepaymentInput
func (_e *ScheduledRepayment_Expecter) BulkCreate(ctx interface{}, data interface{}) *ScheduledRepayment_BulkCreate_Call {
	return &ScheduledRepayment_BulkCreate_Call{Call: _e.mock.On("BulkCreate", ctx, data)}
}

func (_c *ScheduledRepayment_BulkCreate_Call) Run(run func(ctx context.Context, data model.BulkCreateScheduledRepaymentInput)) *ScheduledRepayment_BulkCreate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(model.BulkCreateScheduledRepaymentInput))
	})
	return _c
}

func (_c *ScheduledRepayment_BulkCreate_Call) Return(_a0 error) *ScheduledRepayment_BulkCreate_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ScheduledRepayment_BulkCreate_Call) RunAndReturn(run func(context.Context, model.BulkCreateScheduledRepaymentInput) error) *ScheduledRepayment_BulkCreate_Call {
	_c.Call.Return(run)
	return _c
}

// FindAll provides a mock function with given fields: ctx, data
func (_m *ScheduledRepayment) FindAll(ctx context.Context, data model.FindAllScheduledRepaymentInput) ([]*databasemodel.ScheduledRepayment, error) {
	ret := _m.Called(ctx, data)

	if len(ret) == 0 {
		panic("no return value specified for FindAll")
	}

	var r0 []*databasemodel.ScheduledRepayment
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, model.FindAllScheduledRepaymentInput) ([]*databasemodel.ScheduledRepayment, error)); ok {
		return rf(ctx, data)
	}
	if rf, ok := ret.Get(0).(func(context.Context, model.FindAllScheduledRepaymentInput) []*databasemodel.ScheduledRepayment); ok {
		r0 = rf(ctx, data)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*databasemodel.ScheduledRepayment)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, model.FindAllScheduledRepaymentInput) error); ok {
		r1 = rf(ctx, data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ScheduledRepayment_FindAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindAll'
type ScheduledRepayment_FindAll_Call struct {
	*mock.Call
}

// FindAll is a helper method to define mock.On call
//   - ctx context.Context
//   - data model.FindAllScheduledRepaymentInput
func (_e *ScheduledRepayment_Expecter) FindAll(ctx interface{}, data interface{}) *ScheduledRepayment_FindAll_Call {
	return &ScheduledRepayment_FindAll_Call{Call: _e.mock.On("FindAll", ctx, data)}
}

func (_c *ScheduledRepayment_FindAll_Call) Run(run func(ctx context.Context, data model.FindAllScheduledRepaymentInput)) *ScheduledRepayment_FindAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(model.FindAllScheduledRepaymentInput))
	})
	return _c
}

func (_c *ScheduledRepayment_FindAll_Call) Return(_a0 []*databasemodel.ScheduledRepayment, _a1 error) *ScheduledRepayment_FindAll_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ScheduledRepayment_FindAll_Call) RunAndReturn(run func(context.Context, model.FindAllScheduledRepaymentInput) ([]*databasemodel.ScheduledRepayment, error)) *ScheduledRepayment_FindAll_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: ctx, data
func (_m *ScheduledRepayment) Update(ctx context.Context, data model.UpdateScheduledRepaymentInput) error {
	ret := _m.Called(ctx, data)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, model.UpdateScheduledRepaymentInput) error); ok {
		r0 = rf(ctx, data)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ScheduledRepayment_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type ScheduledRepayment_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - ctx context.Context
//   - data model.UpdateScheduledRepaymentInput
func (_e *ScheduledRepayment_Expecter) Update(ctx interface{}, data interface{}) *ScheduledRepayment_Update_Call {
	return &ScheduledRepayment_Update_Call{Call: _e.mock.On("Update", ctx, data)}
}

func (_c *ScheduledRepayment_Update_Call) Run(run func(ctx context.Context, data model.UpdateScheduledRepaymentInput)) *ScheduledRepayment_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(model.UpdateScheduledRepaymentInput))
	})
	return _c
}

func (_c *ScheduledRepayment_Update_Call) Return(_a0 error) *ScheduledRepayment_Update_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ScheduledRepayment_Update_Call) RunAndReturn(run func(context.Context, model.UpdateScheduledRepaymentInput) error) *ScheduledRepayment_Update_Call {
	_c.Call.Return(run)
	return _c
}

// NewScheduledRepayment creates a new instance of ScheduledRepayment. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewScheduledRepayment(t interface {
	mock.TestingT
	Cleanup(func())
}) *ScheduledRepayment {
	mock := &ScheduledRepayment{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
