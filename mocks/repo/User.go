// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	context "context"
	databasemodel "loanManagement/database/model"

	mock "github.com/stretchr/testify/mock"

	model "loanManagement/repo/model"
)

// User is an autogenerated mock type for the User type
type User struct {
	mock.Mock
}

type User_Expecter struct {
	mock *mock.Mock
}

func (_m *User) EXPECT() *User_Expecter {
	return &User_Expecter{mock: &_m.Mock}
}

// FindOne provides a mock function with given fields: ctx, data
func (_m *User) FindOne(ctx context.Context, data model.FindOneUserInput) (*databasemodel.User, error) {
	ret := _m.Called(ctx, data)

	if len(ret) == 0 {
		panic("no return value specified for FindOne")
	}

	var r0 *databasemodel.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, model.FindOneUserInput) (*databasemodel.User, error)); ok {
		return rf(ctx, data)
	}
	if rf, ok := ret.Get(0).(func(context.Context, model.FindOneUserInput) *databasemodel.User); ok {
		r0 = rf(ctx, data)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*databasemodel.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, model.FindOneUserInput) error); ok {
		r1 = rf(ctx, data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// User_FindOne_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindOne'
type User_FindOne_Call struct {
	*mock.Call
}

// FindOne is a helper method to define mock.On call
//   - ctx context.Context
//   - data model.FindOneUserInput
func (_e *User_Expecter) FindOne(ctx interface{}, data interface{}) *User_FindOne_Call {
	return &User_FindOne_Call{Call: _e.mock.On("FindOne", ctx, data)}
}

func (_c *User_FindOne_Call) Run(run func(ctx context.Context, data model.FindOneUserInput)) *User_FindOne_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(model.FindOneUserInput))
	})
	return _c
}

func (_c *User_FindOne_Call) Return(_a0 *databasemodel.User, _a1 error) *User_FindOne_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *User_FindOne_Call) RunAndReturn(run func(context.Context, model.FindOneUserInput) (*databasemodel.User, error)) *User_FindOne_Call {
	_c.Call.Return(run)
	return _c
}

// NewUser creates a new instance of User. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUser(t interface {
	mock.TestingT
	Cleanup(func())
}) *User {
	mock := &User{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
