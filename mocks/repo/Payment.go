// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	context "context"
	databasemodel "loanManagement/database/model"

	mock "github.com/stretchr/testify/mock"

	model "loanManagement/repo/model"
)

// Payment is an autogenerated mock type for the Payment type
type Payment struct {
	mock.Mock
}

type Payment_Expecter struct {
	mock *mock.Mock
}

func (_m *Payment) EXPECT() *Payment_Expecter {
	return &Payment_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: ctx, data
func (_m *Payment) Create(ctx context.Context, data model.CreatePaymentInput) (*databasemodel.Payment, error) {
	ret := _m.Called(ctx, data)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 *databasemodel.Payment
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, model.CreatePaymentInput) (*databasemodel.Payment, error)); ok {
		return rf(ctx, data)
	}
	if rf, ok := ret.Get(0).(func(context.Context, model.CreatePaymentInput) *databasemodel.Payment); ok {
		r0 = rf(ctx, data)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*databasemodel.Payment)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, model.CreatePaymentInput) error); ok {
		r1 = rf(ctx, data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Payment_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type Payment_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - data model.CreatePaymentInput
func (_e *Payment_Expecter) Create(ctx interface{}, data interface{}) *Payment_Create_Call {
	return &Payment_Create_Call{Call: _e.mock.On("Create", ctx, data)}
}

func (_c *Payment_Create_Call) Run(run func(ctx context.Context, data model.CreatePaymentInput)) *Payment_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(model.CreatePaymentInput))
	})
	return _c
}

func (_c *Payment_Create_Call) Return(_a0 *databasemodel.Payment, _a1 error) *Payment_Create_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Payment_Create_Call) RunAndReturn(run func(context.Context, model.CreatePaymentInput) (*databasemodel.Payment, error)) *Payment_Create_Call {
	_c.Call.Return(run)
	return _c
}

// NewPayment creates a new instance of Payment. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewPayment(t interface {
	mock.TestingT
	Cleanup(func())
}) *Payment {
	mock := &Payment{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
