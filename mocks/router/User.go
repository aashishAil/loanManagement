// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	gin "github.com/gin-gonic/gin"
	mock "github.com/stretchr/testify/mock"
)

// User is an autogenerated mock type for the User type
type User struct {
	mock.Mock
}

type User_Expecter struct {
	mock *mock.Mock
}

func (_m *User) EXPECT() *User_Expecter {
	return &User_Expecter{mock: &_m.Mock}
}

// CreateLoan provides a mock function with given fields: c
func (_m *User) CreateLoan(c *gin.Context) {
	_m.Called(c)
}

// User_CreateLoan_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateLoan'
type User_CreateLoan_Call struct {
	*mock.Call
}

// CreateLoan is a helper method to define mock.On call
//   - c *gin.Context
func (_e *User_Expecter) CreateLoan(c interface{}) *User_CreateLoan_Call {
	return &User_CreateLoan_Call{Call: _e.mock.On("CreateLoan", c)}
}

func (_c *User_CreateLoan_Call) Run(run func(c *gin.Context)) *User_CreateLoan_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*gin.Context))
	})
	return _c
}

func (_c *User_CreateLoan_Call) Return() *User_CreateLoan_Call {
	_c.Call.Return()
	return _c
}

func (_c *User_CreateLoan_Call) RunAndReturn(run func(*gin.Context)) *User_CreateLoan_Call {
	_c.Call.Return(run)
	return _c
}

// Login provides a mock function with given fields: c
func (_m *User) Login(c *gin.Context) {
	_m.Called(c)
}

// User_Login_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Login'
type User_Login_Call struct {
	*mock.Call
}

// Login is a helper method to define mock.On call
//   - c *gin.Context
func (_e *User_Expecter) Login(c interface{}) *User_Login_Call {
	return &User_Login_Call{Call: _e.mock.On("Login", c)}
}

func (_c *User_Login_Call) Run(run func(c *gin.Context)) *User_Login_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*gin.Context))
	})
	return _c
}

func (_c *User_Login_Call) Return() *User_Login_Call {
	_c.Call.Return()
	return _c
}

func (_c *User_Login_Call) RunAndReturn(run func(*gin.Context)) *User_Login_Call {
	_c.Call.Return(run)
	return _c
}

// RecordPayment provides a mock function with given fields: c
func (_m *User) RecordPayment(c *gin.Context) {
	_m.Called(c)
}

// User_RecordPayment_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RecordPayment'
type User_RecordPayment_Call struct {
	*mock.Call
}

// RecordPayment is a helper method to define mock.On call
//   - c *gin.Context
func (_e *User_Expecter) RecordPayment(c interface{}) *User_RecordPayment_Call {
	return &User_RecordPayment_Call{Call: _e.mock.On("RecordPayment", c)}
}

func (_c *User_RecordPayment_Call) Run(run func(c *gin.Context)) *User_RecordPayment_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*gin.Context))
	})
	return _c
}

func (_c *User_RecordPayment_Call) Return() *User_RecordPayment_Call {
	_c.Call.Return()
	return _c
}

func (_c *User_RecordPayment_Call) RunAndReturn(run func(*gin.Context)) *User_RecordPayment_Call {
	_c.Call.Return(run)
	return _c
}

// ViewLoan provides a mock function with given fields: c
func (_m *User) ViewLoan(c *gin.Context) {
	_m.Called(c)
}

// User_ViewLoan_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ViewLoan'
type User_ViewLoan_Call struct {
	*mock.Call
}

// ViewLoan is a helper method to define mock.On call
//   - c *gin.Context
func (_e *User_Expecter) ViewLoan(c interface{}) *User_ViewLoan_Call {
	return &User_ViewLoan_Call{Call: _e.mock.On("ViewLoan", c)}
}

func (_c *User_ViewLoan_Call) Run(run func(c *gin.Context)) *User_ViewLoan_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*gin.Context))
	})
	return _c
}

func (_c *User_ViewLoan_Call) Return() *User_ViewLoan_Call {
	_c.Call.Return()
	return _c
}

func (_c *User_ViewLoan_Call) RunAndReturn(run func(*gin.Context)) *User_ViewLoan_Call {
	_c.Call.Return(run)
	return _c
}

// NewUser creates a new instance of User. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUser(t interface {
	mock.TestingT
	Cleanup(func())
}) *User {
	mock := &User{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
