// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	gin "github.com/gin-gonic/gin"

	mock "github.com/stretchr/testify/mock"
)

// Server is an autogenerated mock type for the Server type
type Server struct {
	mock.Mock
}

type Server_Expecter struct {
	mock *mock.Mock
}

func (_m *Server) EXPECT() *Server_Expecter {
	return &Server_Expecter{mock: &_m.Mock}
}

// RecoverGinError provides a mock function with given fields:
func (_m *Server) RecoverGinError() func(*gin.Context, interface{}) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for RecoverGinError")
	}

	var r0 func(*gin.Context, interface{})
	if rf, ok := ret.Get(0).(func() func(*gin.Context, interface{})); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(func(*gin.Context, interface{}))
		}
	}

	return r0
}

// Server_RecoverGinError_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RecoverGinError'
type Server_RecoverGinError_Call struct {
	*mock.Call
}

// RecoverGinError is a helper method to define mock.On call
func (_e *Server_Expecter) RecoverGinError() *Server_RecoverGinError_Call {
	return &Server_RecoverGinError_Call{Call: _e.mock.On("RecoverGinError")}
}

func (_c *Server_RecoverGinError_Call) Run(run func()) *Server_RecoverGinError_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Server_RecoverGinError_Call) Return(_a0 func(*gin.Context, interface{})) *Server_RecoverGinError_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Server_RecoverGinError_Call) RunAndReturn(run func() func(*gin.Context, interface{})) *Server_RecoverGinError_Call {
	_c.Call.Return(run)
	return _c
}

// NewServer creates a new instance of Server. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewServer(t interface {
	mock.TestingT
	Cleanup(func())
}) *Server {
	mock := &Server{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
