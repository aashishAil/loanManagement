// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	gin "github.com/gin-gonic/gin"

	mock "github.com/stretchr/testify/mock"
)

// Auth is an autogenerated mock type for the Auth type
type Auth struct {
	mock.Mock
}

type Auth_Expecter struct {
	mock *mock.Mock
}

func (_m *Auth) EXPECT() *Auth_Expecter {
	return &Auth_Expecter{mock: &_m.Mock}
}

// Authenticate provides a mock function with given fields:
func (_m *Auth) Authenticate() gin.HandlerFunc {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Authenticate")
	}

	var r0 gin.HandlerFunc
	if rf, ok := ret.Get(0).(func() gin.HandlerFunc); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(gin.HandlerFunc)
		}
	}

	return r0
}

// Auth_Authenticate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Authenticate'
type Auth_Authenticate_Call struct {
	*mock.Call
}

// Authenticate is a helper method to define mock.On call
func (_e *Auth_Expecter) Authenticate() *Auth_Authenticate_Call {
	return &Auth_Authenticate_Call{Call: _e.mock.On("Authenticate")}
}

func (_c *Auth_Authenticate_Call) Run(run func()) *Auth_Authenticate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Auth_Authenticate_Call) Return(_a0 gin.HandlerFunc) *Auth_Authenticate_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Auth_Authenticate_Call) RunAndReturn(run func() gin.HandlerFunc) *Auth_Authenticate_Call {
	_c.Call.Return(run)
	return _c
}

// NewAuth creates a new instance of Auth. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAuth(t interface {
	mock.TestingT
	Cleanup(func())
}) *Auth {
	mock := &Auth{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
