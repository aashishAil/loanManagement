// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	model "loanManagement/handler/model"
)

// Admin is an autogenerated mock type for the Admin type
type Admin struct {
	mock.Mock
}

type Admin_Expecter struct {
	mock *mock.Mock
}

func (_m *Admin) EXPECT() *Admin_Expecter {
	return &Admin_Expecter{mock: &_m.Mock}
}

// FetchLoans provides a mock function with given fields: ctx, data
func (_m *Admin) FetchLoans(ctx context.Context, data model.FetchAdminLoansInput) (*model.FetchAdminLoansOutput, error) {
	ret := _m.Called(ctx, data)

	if len(ret) == 0 {
		panic("no return value specified for FetchLoans")
	}

	var r0 *model.FetchAdminLoansOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, model.FetchAdminLoansInput) (*model.FetchAdminLoansOutput, error)); ok {
		return rf(ctx, data)
	}
	if rf, ok := ret.Get(0).(func(context.Context, model.FetchAdminLoansInput) *model.FetchAdminLoansOutput); ok {
		r0 = rf(ctx, data)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.FetchAdminLoansOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, model.FetchAdminLoansInput) error); ok {
		r1 = rf(ctx, data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Admin_FetchLoans_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FetchLoans'
type Admin_FetchLoans_Call struct {
	*mock.Call
}

// FetchLoans is a helper method to define mock.On call
//   - ctx context.Context
//   - data model.FetchAdminLoansInput
func (_e *Admin_Expecter) FetchLoans(ctx interface{}, data interface{}) *Admin_FetchLoans_Call {
	return &Admin_FetchLoans_Call{Call: _e.mock.On("FetchLoans", ctx, data)}
}

func (_c *Admin_FetchLoans_Call) Run(run func(ctx context.Context, data model.FetchAdminLoansInput)) *Admin_FetchLoans_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(model.FetchAdminLoansInput))
	})
	return _c
}

func (_c *Admin_FetchLoans_Call) Return(_a0 *model.FetchAdminLoansOutput, _a1 error) *Admin_FetchLoans_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Admin_FetchLoans_Call) RunAndReturn(run func(context.Context, model.FetchAdminLoansInput) (*model.FetchAdminLoansOutput, error)) *Admin_FetchLoans_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateLoanAndScheduledRepayment provides a mock function with given fields: ctx, data
func (_m *Admin) UpdateLoanAndScheduledRepayment(ctx context.Context, data model.UpdateLoanAndScheduledRepaymentInput) (*model.UpdateLoanAndScheduledRepaymentOutput, error) {
	ret := _m.Called(ctx, data)

	if len(ret) == 0 {
		panic("no return value specified for UpdateLoanAndScheduledRepayment")
	}

	var r0 *model.UpdateLoanAndScheduledRepaymentOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, model.UpdateLoanAndScheduledRepaymentInput) (*model.UpdateLoanAndScheduledRepaymentOutput, error)); ok {
		return rf(ctx, data)
	}
	if rf, ok := ret.Get(0).(func(context.Context, model.UpdateLoanAndScheduledRepaymentInput) *model.UpdateLoanAndScheduledRepaymentOutput); ok {
		r0 = rf(ctx, data)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.UpdateLoanAndScheduledRepaymentOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, model.UpdateLoanAndScheduledRepaymentInput) error); ok {
		r1 = rf(ctx, data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Admin_UpdateLoanAndScheduledRepayment_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateLoanAndScheduledRepayment'
type Admin_UpdateLoanAndScheduledRepayment_Call struct {
	*mock.Call
}

// UpdateLoanAndScheduledRepayment is a helper method to define mock.On call
//   - ctx context.Context
//   - data model.UpdateLoanAndScheduledRepaymentInput
func (_e *Admin_Expecter) UpdateLoanAndScheduledRepayment(ctx interface{}, data interface{}) *Admin_UpdateLoanAndScheduledRepayment_Call {
	return &Admin_UpdateLoanAndScheduledRepayment_Call{Call: _e.mock.On("UpdateLoanAndScheduledRepayment", ctx, data)}
}

func (_c *Admin_UpdateLoanAndScheduledRepayment_Call) Run(run func(ctx context.Context, data model.UpdateLoanAndScheduledRepaymentInput)) *Admin_UpdateLoanAndScheduledRepayment_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(model.UpdateLoanAndScheduledRepaymentInput))
	})
	return _c
}

func (_c *Admin_UpdateLoanAndScheduledRepayment_Call) Return(_a0 *model.UpdateLoanAndScheduledRepaymentOutput, _a1 error) *Admin_UpdateLoanAndScheduledRepayment_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Admin_UpdateLoanAndScheduledRepayment_Call) RunAndReturn(run func(context.Context, model.UpdateLoanAndScheduledRepaymentInput) (*model.UpdateLoanAndScheduledRepaymentOutput, error)) *Admin_UpdateLoanAndScheduledRepayment_Call {
	_c.Call.Return(run)
	return _c
}

// NewAdmin creates a new instance of Admin. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAdmin(t interface {
	mock.TestingT
	Cleanup(func())
}) *Admin {
	mock := &Admin{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
