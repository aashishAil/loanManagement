// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	model "loanManagement/handler/model"

	uuid "github.com/google/uuid"
)

// User is an autogenerated mock type for the User type
type User struct {
	mock.Mock
}

type User_Expecter struct {
	mock *mock.Mock
}

func (_m *User) EXPECT() *User_Expecter {
	return &User_Expecter{mock: &_m.Mock}
}

// AddLoanPayment provides a mock function with given fields: ctx, data
func (_m *User) AddLoanPayment(ctx context.Context, data model.AddUserLoanPaymentInput) (*model.AddUserLoanPaymentOutput, error) {
	ret := _m.Called(ctx, data)

	if len(ret) == 0 {
		panic("no return value specified for AddLoanPayment")
	}

	var r0 *model.AddUserLoanPaymentOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, model.AddUserLoanPaymentInput) (*model.AddUserLoanPaymentOutput, error)); ok {
		return rf(ctx, data)
	}
	if rf, ok := ret.Get(0).(func(context.Context, model.AddUserLoanPaymentInput) *model.AddUserLoanPaymentOutput); ok {
		r0 = rf(ctx, data)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.AddUserLoanPaymentOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, model.AddUserLoanPaymentInput) error); ok {
		r1 = rf(ctx, data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// User_AddLoanPayment_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddLoanPayment'
type User_AddLoanPayment_Call struct {
	*mock.Call
}

// AddLoanPayment is a helper method to define mock.On call
//   - ctx context.Context
//   - data model.AddUserLoanPaymentInput
func (_e *User_Expecter) AddLoanPayment(ctx interface{}, data interface{}) *User_AddLoanPayment_Call {
	return &User_AddLoanPayment_Call{Call: _e.mock.On("AddLoanPayment", ctx, data)}
}

func (_c *User_AddLoanPayment_Call) Run(run func(ctx context.Context, data model.AddUserLoanPaymentInput)) *User_AddLoanPayment_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(model.AddUserLoanPaymentInput))
	})
	return _c
}

func (_c *User_AddLoanPayment_Call) Return(_a0 *model.AddUserLoanPaymentOutput, _a1 error) *User_AddLoanPayment_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *User_AddLoanPayment_Call) RunAndReturn(run func(context.Context, model.AddUserLoanPaymentInput) (*model.AddUserLoanPaymentOutput, error)) *User_AddLoanPayment_Call {
	_c.Call.Return(run)
	return _c
}

// CheckValidCredentials provides a mock function with given fields: ctx, email, password
func (_m *User) CheckValidCredentials(ctx context.Context, email string, password string) (string, error) {
	ret := _m.Called(ctx, email, password)

	if len(ret) == 0 {
		panic("no return value specified for CheckValidCredentials")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (string, error)); ok {
		return rf(ctx, email, password)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) string); ok {
		r0 = rf(ctx, email, password)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, email, password)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// User_CheckValidCredentials_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CheckValidCredentials'
type User_CheckValidCredentials_Call struct {
	*mock.Call
}

// CheckValidCredentials is a helper method to define mock.On call
//   - ctx context.Context
//   - email string
//   - password string
func (_e *User_Expecter) CheckValidCredentials(ctx interface{}, email interface{}, password interface{}) *User_CheckValidCredentials_Call {
	return &User_CheckValidCredentials_Call{Call: _e.mock.On("CheckValidCredentials", ctx, email, password)}
}

func (_c *User_CheckValidCredentials_Call) Run(run func(ctx context.Context, email string, password string)) *User_CheckValidCredentials_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *User_CheckValidCredentials_Call) Return(_a0 string, _a1 error) *User_CheckValidCredentials_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *User_CheckValidCredentials_Call) RunAndReturn(run func(context.Context, string, string) (string, error)) *User_CheckValidCredentials_Call {
	_c.Call.Return(run)
	return _c
}

// CreateLoan provides a mock function with given fields: ctx, data
func (_m *User) CreateLoan(ctx context.Context, data model.CreateUserLoanInput) (uuid.UUID, error) {
	ret := _m.Called(ctx, data)

	if len(ret) == 0 {
		panic("no return value specified for CreateLoan")
	}

	var r0 uuid.UUID
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, model.CreateUserLoanInput) (uuid.UUID, error)); ok {
		return rf(ctx, data)
	}
	if rf, ok := ret.Get(0).(func(context.Context, model.CreateUserLoanInput) uuid.UUID); ok {
		r0 = rf(ctx, data)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(uuid.UUID)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, model.CreateUserLoanInput) error); ok {
		r1 = rf(ctx, data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// User_CreateLoan_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateLoan'
type User_CreateLoan_Call struct {
	*mock.Call
}

// CreateLoan is a helper method to define mock.On call
//   - ctx context.Context
//   - data model.CreateUserLoanInput
func (_e *User_Expecter) CreateLoan(ctx interface{}, data interface{}) *User_CreateLoan_Call {
	return &User_CreateLoan_Call{Call: _e.mock.On("CreateLoan", ctx, data)}
}

func (_c *User_CreateLoan_Call) Run(run func(ctx context.Context, data model.CreateUserLoanInput)) *User_CreateLoan_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(model.CreateUserLoanInput))
	})
	return _c
}

func (_c *User_CreateLoan_Call) Return(_a0 uuid.UUID, _a1 error) *User_CreateLoan_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *User_CreateLoan_Call) RunAndReturn(run func(context.Context, model.CreateUserLoanInput) (uuid.UUID, error)) *User_CreateLoan_Call {
	_c.Call.Return(run)
	return _c
}

// FetchLoans provides a mock function with given fields: ctx, data
func (_m *User) FetchLoans(ctx context.Context, data model.FetchUserLoanInput) (*model.FetchUserLoansOutput, error) {
	ret := _m.Called(ctx, data)

	if len(ret) == 0 {
		panic("no return value specified for FetchLoans")
	}

	var r0 *model.FetchUserLoansOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, model.FetchUserLoanInput) (*model.FetchUserLoansOutput, error)); ok {
		return rf(ctx, data)
	}
	if rf, ok := ret.Get(0).(func(context.Context, model.FetchUserLoanInput) *model.FetchUserLoansOutput); ok {
		r0 = rf(ctx, data)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.FetchUserLoansOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, model.FetchUserLoanInput) error); ok {
		r1 = rf(ctx, data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// User_FetchLoans_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FetchLoans'
type User_FetchLoans_Call struct {
	*mock.Call
}

// FetchLoans is a helper method to define mock.On call
//   - ctx context.Context
//   - data model.FetchUserLoanInput
func (_e *User_Expecter) FetchLoans(ctx interface{}, data interface{}) *User_FetchLoans_Call {
	return &User_FetchLoans_Call{Call: _e.mock.On("FetchLoans", ctx, data)}
}

func (_c *User_FetchLoans_Call) Run(run func(ctx context.Context, data model.FetchUserLoanInput)) *User_FetchLoans_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(model.FetchUserLoanInput))
	})
	return _c
}

func (_c *User_FetchLoans_Call) Return(_a0 *model.FetchUserLoansOutput, _a1 error) *User_FetchLoans_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *User_FetchLoans_Call) RunAndReturn(run func(context.Context, model.FetchUserLoanInput) (*model.FetchUserLoansOutput, error)) *User_FetchLoans_Call {
	_c.Call.Return(run)
	return _c
}

// NewUser creates a new instance of User. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUser(t interface {
	mock.TestingT
	Cleanup(func())
}) *User {
	mock := &User{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
