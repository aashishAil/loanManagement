// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	instance "loanManagement/database/instance"

	mock "github.com/stretchr/testify/mock"
)

// Config is an autogenerated mock type for the Config type
type Config struct {
	mock.Mock
}

type Config_Expecter struct {
	mock *mock.Mock
}

func (_m *Config) EXPECT() *Config_Expecter {
	return &Config_Expecter{mock: &_m.Mock}
}

// AppName provides a mock function with given fields:
func (_m *Config) AppName() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for AppName")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Config_AppName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AppName'
type Config_AppName_Call struct {
	*mock.Call
}

// AppName is a helper method to define mock.On call
func (_e *Config_Expecter) AppName() *Config_AppName_Call {
	return &Config_AppName_Call{Call: _e.mock.On("AppName")}
}

func (_c *Config_AppName_Call) Run(run func()) *Config_AppName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Config_AppName_Call) Return(_a0 string) *Config_AppName_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Config_AppName_Call) RunAndReturn(run func() string) *Config_AppName_Call {
	_c.Call.Return(run)
	return _c
}

// IsDevelopment provides a mock function with given fields:
func (_m *Config) IsDevelopment() bool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for IsDevelopment")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// Config_IsDevelopment_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsDevelopment'
type Config_IsDevelopment_Call struct {
	*mock.Call
}

// IsDevelopment is a helper method to define mock.On call
func (_e *Config_Expecter) IsDevelopment() *Config_IsDevelopment_Call {
	return &Config_IsDevelopment_Call{Call: _e.mock.On("IsDevelopment")}
}

func (_c *Config_IsDevelopment_Call) Run(run func()) *Config_IsDevelopment_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Config_IsDevelopment_Call) Return(_a0 bool) *Config_IsDevelopment_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Config_IsDevelopment_Call) RunAndReturn(run func() bool) *Config_IsDevelopment_Call {
	_c.Call.Return(run)
	return _c
}

// JwtSigningKey provides a mock function with given fields:
func (_m *Config) JwtSigningKey() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for JwtSigningKey")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Config_JwtSigningKey_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'JwtSigningKey'
type Config_JwtSigningKey_Call struct {
	*mock.Call
}

// JwtSigningKey is a helper method to define mock.On call
func (_e *Config_Expecter) JwtSigningKey() *Config_JwtSigningKey_Call {
	return &Config_JwtSigningKey_Call{Call: _e.mock.On("JwtSigningKey")}
}

func (_c *Config_JwtSigningKey_Call) Run(run func()) *Config_JwtSigningKey_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Config_JwtSigningKey_Call) Return(_a0 string) *Config_JwtSigningKey_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Config_JwtSigningKey_Call) RunAndReturn(run func() string) *Config_JwtSigningKey_Call {
	_c.Call.Return(run)
	return _c
}

// PostgresConfig provides a mock function with given fields:
func (_m *Config) PostgresConfig() instance.PostgresDbConfig {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for PostgresConfig")
	}

	var r0 instance.PostgresDbConfig
	if rf, ok := ret.Get(0).(func() instance.PostgresDbConfig); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(instance.PostgresDbConfig)
	}

	return r0
}

// Config_PostgresConfig_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PostgresConfig'
type Config_PostgresConfig_Call struct {
	*mock.Call
}

// PostgresConfig is a helper method to define mock.On call
func (_e *Config_Expecter) PostgresConfig() *Config_PostgresConfig_Call {
	return &Config_PostgresConfig_Call{Call: _e.mock.On("PostgresConfig")}
}

func (_c *Config_PostgresConfig_Call) Run(run func()) *Config_PostgresConfig_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Config_PostgresConfig_Call) Return(_a0 instance.PostgresDbConfig) *Config_PostgresConfig_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Config_PostgresConfig_Call) RunAndReturn(run func() instance.PostgresDbConfig) *Config_PostgresConfig_Call {
	_c.Call.Return(run)
	return _c
}

// ServerPort provides a mock function with given fields:
func (_m *Config) ServerPort() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for ServerPort")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Config_ServerPort_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ServerPort'
type Config_ServerPort_Call struct {
	*mock.Call
}

// ServerPort is a helper method to define mock.On call
func (_e *Config_Expecter) ServerPort() *Config_ServerPort_Call {
	return &Config_ServerPort_Call{Call: _e.mock.On("ServerPort")}
}

func (_c *Config_ServerPort_Call) Run(run func()) *Config_ServerPort_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Config_ServerPort_Call) Return(_a0 string) *Config_ServerPort_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Config_ServerPort_Call) RunAndReturn(run func() string) *Config_ServerPort_Call {
	_c.Call.Return(run)
	return _c
}

// NewConfig creates a new instance of Config. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewConfig(t interface {
	mock.TestingT
	Cleanup(func())
}) *Config {
	mock := &Config{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
