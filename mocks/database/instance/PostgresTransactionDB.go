// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	gorm "gorm.io/gorm"

	mock "github.com/stretchr/testify/mock"
)

// PostgresTransactionDB is an autogenerated mock type for the PostgresTransactionDB type
type PostgresTransactionDB struct {
	mock.Mock
}

type PostgresTransactionDB_Expecter struct {
	mock *mock.Mock
}

func (_m *PostgresTransactionDB) EXPECT() *PostgresTransactionDB_Expecter {
	return &PostgresTransactionDB_Expecter{mock: &_m.Mock}
}

// CheckError provides a mock function with given fields:
func (_m *PostgresTransactionDB) CheckError() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for CheckError")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// PostgresTransactionDB_CheckError_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CheckError'
type PostgresTransactionDB_CheckError_Call struct {
	*mock.Call
}

// CheckError is a helper method to define mock.On call
func (_e *PostgresTransactionDB_Expecter) CheckError() *PostgresTransactionDB_CheckError_Call {
	return &PostgresTransactionDB_CheckError_Call{Call: _e.mock.On("CheckError")}
}

func (_c *PostgresTransactionDB_CheckError_Call) Run(run func()) *PostgresTransactionDB_CheckError_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *PostgresTransactionDB_CheckError_Call) Return(_a0 error) *PostgresTransactionDB_CheckError_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *PostgresTransactionDB_CheckError_Call) RunAndReturn(run func() error) *PostgresTransactionDB_CheckError_Call {
	_c.Call.Return(run)
	return _c
}

// Commit provides a mock function with given fields:
func (_m *PostgresTransactionDB) Commit() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Commit")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// PostgresTransactionDB_Commit_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Commit'
type PostgresTransactionDB_Commit_Call struct {
	*mock.Call
}

// Commit is a helper method to define mock.On call
func (_e *PostgresTransactionDB_Expecter) Commit() *PostgresTransactionDB_Commit_Call {
	return &PostgresTransactionDB_Commit_Call{Call: _e.mock.On("Commit")}
}

func (_c *PostgresTransactionDB_Commit_Call) Run(run func()) *PostgresTransactionDB_Commit_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *PostgresTransactionDB_Commit_Call) Return(_a0 error) *PostgresTransactionDB_Commit_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *PostgresTransactionDB_Commit_Call) RunAndReturn(run func() error) *PostgresTransactionDB_Commit_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function with given fields:
func (_m *PostgresTransactionDB) Get() *gorm.DB {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *gorm.DB
	if rf, ok := ret.Get(0).(func() *gorm.DB); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gorm.DB)
		}
	}

	return r0
}

// PostgresTransactionDB_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type PostgresTransactionDB_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
func (_e *PostgresTransactionDB_Expecter) Get() *PostgresTransactionDB_Get_Call {
	return &PostgresTransactionDB_Get_Call{Call: _e.mock.On("Get")}
}

func (_c *PostgresTransactionDB_Get_Call) Run(run func()) *PostgresTransactionDB_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *PostgresTransactionDB_Get_Call) Return(_a0 *gorm.DB) *PostgresTransactionDB_Get_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *PostgresTransactionDB_Get_Call) RunAndReturn(run func() *gorm.DB) *PostgresTransactionDB_Get_Call {
	_c.Call.Return(run)
	return _c
}

// Rollback provides a mock function with given fields:
func (_m *PostgresTransactionDB) Rollback() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Rollback")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// PostgresTransactionDB_Rollback_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Rollback'
type PostgresTransactionDB_Rollback_Call struct {
	*mock.Call
}

// Rollback is a helper method to define mock.On call
func (_e *PostgresTransactionDB_Expecter) Rollback() *PostgresTransactionDB_Rollback_Call {
	return &PostgresTransactionDB_Rollback_Call{Call: _e.mock.On("Rollback")}
}

func (_c *PostgresTransactionDB_Rollback_Call) Run(run func()) *PostgresTransactionDB_Rollback_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *PostgresTransactionDB_Rollback_Call) Return(_a0 error) *PostgresTransactionDB_Rollback_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *PostgresTransactionDB_Rollback_Call) RunAndReturn(run func() error) *PostgresTransactionDB_Rollback_Call {
	_c.Call.Return(run)
	return _c
}

// NewPostgresTransactionDB creates a new instance of PostgresTransactionDB. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewPostgresTransactionDB(t interface {
	mock.TestingT
	Cleanup(func())
}) *PostgresTransactionDB {
	mock := &PostgresTransactionDB{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
