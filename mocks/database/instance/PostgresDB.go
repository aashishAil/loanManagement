// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	instance "loanManagement/database/instance"

	mock "github.com/stretchr/testify/mock"
	gorm "gorm.io/gorm"
)

// PostgresDB is an autogenerated mock type for the PostgresDB type
type PostgresDB struct {
	mock.Mock
}

type PostgresDB_Expecter struct {
	mock *mock.Mock
}

func (_m *PostgresDB) EXPECT() *PostgresDB_Expecter {
	return &PostgresDB_Expecter{mock: &_m.Mock}
}

// GetReadableDb provides a mock function with given fields:
func (_m *PostgresDB) GetReadableDb() *gorm.DB {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetReadableDb")
	}

	var r0 *gorm.DB
	if rf, ok := ret.Get(0).(func() *gorm.DB); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gorm.DB)
		}
	}

	return r0
}

// PostgresDB_GetReadableDb_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetReadableDb'
type PostgresDB_GetReadableDb_Call struct {
	*mock.Call
}

// GetReadableDb is a helper method to define mock.On call
func (_e *PostgresDB_Expecter) GetReadableDb() *PostgresDB_GetReadableDb_Call {
	return &PostgresDB_GetReadableDb_Call{Call: _e.mock.On("GetReadableDb")}
}

func (_c *PostgresDB_GetReadableDb_Call) Run(run func()) *PostgresDB_GetReadableDb_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *PostgresDB_GetReadableDb_Call) Return(_a0 *gorm.DB) *PostgresDB_GetReadableDb_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *PostgresDB_GetReadableDb_Call) RunAndReturn(run func() *gorm.DB) *PostgresDB_GetReadableDb_Call {
	_c.Call.Return(run)
	return _c
}

// GetTransactionDb provides a mock function with given fields:
func (_m *PostgresDB) GetTransactionDb() (instance.PostgresTransactionDB, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetTransactionDb")
	}

	var r0 instance.PostgresTransactionDB
	var r1 error
	if rf, ok := ret.Get(0).(func() (instance.PostgresTransactionDB, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() instance.PostgresTransactionDB); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(instance.PostgresTransactionDB)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PostgresDB_GetTransactionDb_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTransactionDb'
type PostgresDB_GetTransactionDb_Call struct {
	*mock.Call
}

// GetTransactionDb is a helper method to define mock.On call
func (_e *PostgresDB_Expecter) GetTransactionDb() *PostgresDB_GetTransactionDb_Call {
	return &PostgresDB_GetTransactionDb_Call{Call: _e.mock.On("GetTransactionDb")}
}

func (_c *PostgresDB_GetTransactionDb_Call) Run(run func()) *PostgresDB_GetTransactionDb_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *PostgresDB_GetTransactionDb_Call) Return(_a0 instance.PostgresTransactionDB, _a1 error) *PostgresDB_GetTransactionDb_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *PostgresDB_GetTransactionDb_Call) RunAndReturn(run func() (instance.PostgresTransactionDB, error)) *PostgresDB_GetTransactionDb_Call {
	_c.Call.Return(run)
	return _c
}

// GetWritableDb provides a mock function with given fields:
func (_m *PostgresDB) GetWritableDb() *gorm.DB {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetWritableDb")
	}

	var r0 *gorm.DB
	if rf, ok := ret.Get(0).(func() *gorm.DB); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gorm.DB)
		}
	}

	return r0
}

// PostgresDB_GetWritableDb_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetWritableDb'
type PostgresDB_GetWritableDb_Call struct {
	*mock.Call
}

// GetWritableDb is a helper method to define mock.On call
func (_e *PostgresDB_Expecter) GetWritableDb() *PostgresDB_GetWritableDb_Call {
	return &PostgresDB_GetWritableDb_Call{Call: _e.mock.On("GetWritableDb")}
}

func (_c *PostgresDB_GetWritableDb_Call) Run(run func()) *PostgresDB_GetWritableDb_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *PostgresDB_GetWritableDb_Call) Return(_a0 *gorm.DB) *PostgresDB_GetWritableDb_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *PostgresDB_GetWritableDb_Call) RunAndReturn(run func() *gorm.DB) *PostgresDB_GetWritableDb_Call {
	_c.Call.Return(run)
	return _c
}

// NewPostgresDB creates a new instance of PostgresDB. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewPostgresDB(t interface {
	mock.TestingT
	Cleanup(func())
}) *PostgresDB {
	mock := &PostgresDB{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
