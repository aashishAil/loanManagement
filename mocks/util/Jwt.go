// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	loanManagementmodel "loanManagement/model"

	mock "github.com/stretchr/testify/mock"

	model "loanManagement/database/model"
)

// Jwt is an autogenerated mock type for the Jwt type
type Jwt struct {
	mock.Mock
}

type Jwt_Expecter struct {
	mock *mock.Mock
}

func (_m *Jwt) EXPECT() *Jwt_Expecter {
	return &Jwt_Expecter{mock: &_m.Mock}
}

// GenerateToken provides a mock function with given fields: user
func (_m *Jwt) GenerateToken(user model.User) (string, error) {
	ret := _m.Called(user)

	if len(ret) == 0 {
		panic("no return value specified for GenerateToken")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(model.User) (string, error)); ok {
		return rf(user)
	}
	if rf, ok := ret.Get(0).(func(model.User) string); ok {
		r0 = rf(user)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(model.User) error); ok {
		r1 = rf(user)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Jwt_GenerateToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GenerateToken'
type Jwt_GenerateToken_Call struct {
	*mock.Call
}

// GenerateToken is a helper method to define mock.On call
//   - user model.User
func (_e *Jwt_Expecter) GenerateToken(user interface{}) *Jwt_GenerateToken_Call {
	return &Jwt_GenerateToken_Call{Call: _e.mock.On("GenerateToken", user)}
}

func (_c *Jwt_GenerateToken_Call) Run(run func(user model.User)) *Jwt_GenerateToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(model.User))
	})
	return _c
}

func (_c *Jwt_GenerateToken_Call) Return(_a0 string, _a1 error) *Jwt_GenerateToken_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Jwt_GenerateToken_Call) RunAndReturn(run func(model.User) (string, error)) *Jwt_GenerateToken_Call {
	_c.Call.Return(run)
	return _c
}

// ValidateToken provides a mock function with given fields: tokenString
func (_m *Jwt) ValidateToken(tokenString string) (*loanManagementmodel.LoggedInUser, error) {
	ret := _m.Called(tokenString)

	if len(ret) == 0 {
		panic("no return value specified for ValidateToken")
	}

	var r0 *loanManagementmodel.LoggedInUser
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*loanManagementmodel.LoggedInUser, error)); ok {
		return rf(tokenString)
	}
	if rf, ok := ret.Get(0).(func(string) *loanManagementmodel.LoggedInUser); ok {
		r0 = rf(tokenString)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*loanManagementmodel.LoggedInUser)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(tokenString)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Jwt_ValidateToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ValidateToken'
type Jwt_ValidateToken_Call struct {
	*mock.Call
}

// ValidateToken is a helper method to define mock.On call
//   - tokenString string
func (_e *Jwt_Expecter) ValidateToken(tokenString interface{}) *Jwt_ValidateToken_Call {
	return &Jwt_ValidateToken_Call{Call: _e.mock.On("ValidateToken", tokenString)}
}

func (_c *Jwt_ValidateToken_Call) Run(run func(tokenString string)) *Jwt_ValidateToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *Jwt_ValidateToken_Call) Return(_a0 *loanManagementmodel.LoggedInUser, _a1 error) *Jwt_ValidateToken_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Jwt_ValidateToken_Call) RunAndReturn(run func(string) (*loanManagementmodel.LoggedInUser, error)) *Jwt_ValidateToken_Call {
	_c.Call.Return(run)
	return _c
}

// NewJwt creates a new instance of Jwt. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewJwt(t interface {
	mock.TestingT
	Cleanup(func())
}) *Jwt {
	mock := &Jwt{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
