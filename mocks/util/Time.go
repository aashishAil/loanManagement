// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	time "time"

	mock "github.com/stretchr/testify/mock"
)

// Time is an autogenerated mock type for the Time type
type Time struct {
	mock.Mock
}

type Time_Expecter struct {
	mock *mock.Mock
}

func (_m *Time) EXPECT() *Time_Expecter {
	return &Time_Expecter{mock: &_m.Mock}
}

// GetCurrent provides a mock function with given fields:
func (_m *Time) GetCurrent() time.Time {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetCurrent")
	}

	var r0 time.Time
	if rf, ok := ret.Get(0).(func() time.Time); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(time.Time)
	}

	return r0
}

// Time_GetCurrent_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCurrent'
type Time_GetCurrent_Call struct {
	*mock.Call
}

// GetCurrent is a helper method to define mock.On call
func (_e *Time_Expecter) GetCurrent() *Time_GetCurrent_Call {
	return &Time_GetCurrent_Call{Call: _e.mock.On("GetCurrent")}
}

func (_c *Time_GetCurrent_Call) Run(run func()) *Time_GetCurrent_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Time_GetCurrent_Call) Return(_a0 time.Time) *Time_GetCurrent_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Time_GetCurrent_Call) RunAndReturn(run func() time.Time) *Time_GetCurrent_Call {
	_c.Call.Return(run)
	return _c
}

// NewTime creates a new instance of Time. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTime(t interface {
	mock.TestingT
	Cleanup(func())
}) *Time {
	mock := &Time{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
